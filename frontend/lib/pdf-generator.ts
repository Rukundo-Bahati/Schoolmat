export interface OrderData {
  id: string
  item: string
  date: string
  amount: string
  status: string
  category: string
  student: string
  parentName?: string
  parentEmail?: string
  parentPhone?: string
}

export interface SchoolInfo {
  name: string
  address: string
  phone: string
  email: string
}

export const generateOrderHistoryPDF = async (orders: OrderData[], parentInfo: any, schoolInfo: SchoolInfo) => {
  // Dynamic import to avoid SSR issues
  const jsPDF = (await import("jspdf")).default

  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.width
  const margin = 20

  // Header
  doc.setFontSize(20)
  doc.setTextColor(30, 64, 175) // Blue color
  doc.text("SchoolMart", margin, 30)

  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0)
  doc.text("Order History Report", margin, 45)

  // School Info
  doc.setFontSize(10)
  doc.setTextColor(100, 100, 100)
  doc.text(schoolInfo.name, pageWidth - margin - 60, 25)
  doc.text(schoolInfo.address, pageWidth - margin - 60, 32)
  doc.text(schoolInfo.phone, pageWidth - margin - 60, 39)
  doc.text(schoolInfo.email, pageWidth - margin - 60, 46)

  // Parent Info
  doc.setFontSize(12)
  doc.setTextColor(0, 0, 0)
  doc.text("Parent Information:", margin, 65)
  doc.setFontSize(10)
  doc.text(`Name: ${parentInfo.parentName}`, margin, 75)
  doc.text(`Email: ${parentInfo.email}`, margin, 82)
  doc.text(`Phone: ${parentInfo.phone}`, margin, 89)
  doc.text(`Student: ${parentInfo.studentName} - ${parentInfo.studentGrade}`, margin, 96)

  // Generate date
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, 103)

  // Summary
  const totalAmount = orders.reduce((sum, order) => sum + Number.parseInt(order.amount.replace(",", "")), 0)
  doc.setFontSize(12)
  doc.text("Summary:", margin, 120)
  doc.setFontSize(10)
  doc.text(`Total Orders: ${orders.length}`, margin, 130)
  doc.text(`Total Amount: RWF ${totalAmount.toLocaleString()}`, margin, 137)
  doc.text(`Delivered Orders: ${orders.filter((o) => o.status === "delivered").length}`, margin, 144)

  // Table Header
  let yPosition = 165
  doc.setFontSize(10)
  doc.setTextColor(0, 0, 0)
  doc.text("Date", margin, yPosition)
  doc.text("Item", margin + 30, yPosition)
  doc.text("Category", margin + 90, yPosition)
  doc.text("Amount", margin + 130, yPosition)
  doc.text("Status", margin + 160, yPosition)

  // Draw line under header
  doc.line(margin, yPosition + 2, pageWidth - margin, yPosition + 2)
  yPosition += 10

  // Table Content
  orders.forEach((order, index) => {
    if (yPosition > 270) {
      doc.addPage()
      yPosition = 30

      // Repeat header on new page
      doc.setFontSize(10)
      doc.text("Date", margin, yPosition)
      doc.text("Item", margin + 30, yPosition)
      doc.text("Category", margin + 90, yPosition)
      doc.text("Amount", margin + 130, yPosition)
      doc.text("Status", margin + 160, yPosition)
      doc.line(margin, yPosition + 2, pageWidth - margin, yPosition + 2)
      yPosition += 10
    }

    doc.setFontSize(9)
    doc.text(order.date, margin, yPosition)

    // Truncate long item names
    const itemName = order.item.length > 25 ? order.item.substring(0, 25) + "..." : order.item
    doc.text(itemName, margin + 30, yPosition)

    doc.text(order.category, margin + 90, yPosition)
    doc.text(`RWF ${order.amount}`, margin + 130, yPosition)

    // Status with color
    if (order.status === "delivered") {
      doc.setTextColor(34, 197, 94) // Green
    } else if (order.status === "processing") {
      doc.setTextColor(234, 179, 8) // Yellow
    } else {
      doc.setTextColor(59, 130, 246) // Blue
    }
    doc.text(order.status.toUpperCase(), margin + 160, yPosition)
    doc.setTextColor(0, 0, 0) // Reset to black

    yPosition += 8
  })

  // Footer
  const pageCount = doc.internal.getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i)
    doc.setFontSize(8)
    doc.setTextColor(100, 100, 100)
    doc.text(`Page ${i} of ${pageCount}`, pageWidth - margin - 20, doc.internal.pageSize.height - 10)
    doc.text("Generated by SchoolMart System", margin, doc.internal.pageSize.height - 10)
  }

  return doc
}

export const generateSingleOrderPDF = async (order: OrderData, parentInfo: any, schoolInfo: SchoolInfo) => {
  const jsPDF = (await import("jspdf")).default

  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.width
  const margin = 20

  // Header
  doc.setFontSize(24)
  doc.setTextColor(30, 64, 175)
  doc.text("SchoolMart", margin, 30)

  doc.setFontSize(18)
  doc.setTextColor(0, 0, 0)
  doc.text("Order Receipt", margin, 50)

  // School Info
  doc.setFontSize(10)
  doc.setTextColor(100, 100, 100)
  doc.text(schoolInfo.name, pageWidth - margin - 60, 25)
  doc.text(schoolInfo.address, pageWidth - margin - 60, 32)
  doc.text(schoolInfo.phone, pageWidth - margin - 60, 39)
  doc.text(schoolInfo.email, pageWidth - margin - 60, 46)

  // Order Info Box
  doc.setDrawColor(59, 130, 246)
  doc.setLineWidth(0.5)
  doc.rect(margin, 70, pageWidth - 2 * margin, 40)

  doc.setFontSize(12)
  doc.setTextColor(0, 0, 0)
  doc.text("Order Details:", margin + 5, 85)
  doc.setFontSize(10)
  doc.text(`Order ID: ${order.id}`, margin + 5, 95)
  doc.text(`Date: ${order.date}`, margin + 5, 102)
  doc.text(`Status: ${order.status.toUpperCase()}`, pageWidth - margin - 50, 95)

  // Parent & Student Info
  doc.setFontSize(12)
  doc.text("Customer Information:", margin, 130)
  doc.setFontSize(10)
  doc.text(`Parent: ${parentInfo.parentName}`, margin, 140)
  doc.text(`Email: ${parentInfo.email}`, margin, 147)
  doc.text(`Phone: ${parentInfo.phone}`, margin, 154)
  doc.text(`Student: ${parentInfo.studentName} - ${parentInfo.studentGrade}`, margin, 161)

  // Item Details
  doc.setFontSize(12)
  doc.text("Item Details:", margin, 180)

  // Item box
  doc.setDrawColor(200, 200, 200)
  doc.rect(margin, 190, pageWidth - 2 * margin, 30)

  doc.setFontSize(11)
  doc.text(`Item: ${order.item}`, margin + 5, 205)
  doc.text(`Category: ${order.category}`, margin + 5, 212)
  doc.text(`Amount: RWF ${order.amount}`, pageWidth - margin - 50, 205)

  // Pickup Information
  doc.setFontSize(12)
  doc.setTextColor(30, 64, 175)
  doc.text("Pickup Information:", margin, 240)
  doc.setFontSize(10)
  doc.setTextColor(0, 0, 0)
  doc.text("Location: School Main Office", margin, 250)
  doc.text("Hours: 8:00 AM - 4:00 PM (Monday - Friday)", margin, 257)
  doc.text("Please bring this receipt and valid ID for pickup", margin, 264)

  // Footer
  doc.setFontSize(8)
  doc.setTextColor(100, 100, 100)
  doc.text("Thank you for using SchoolMart!", margin, 280)
  doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth - margin - 60, 280)

  return doc
}

export const downloadPDF = (doc: any, filename: string) => {
  doc.save(filename)
}
